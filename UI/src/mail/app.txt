import '../node_modules/highlight.js/styles/tomorrow-night-eighties.css';
import './app.css';
import React, { Component } from 'react';
import HighLight from 'react-syntax-highlight';
import beautify  from 'js-beautify';
import MobNavigation from './components/mob-navigation';
import NavigationSection from './components/navigation-section';
import ContentSection from './components/content-section';
import RightInfoSection from './components/right-info-section';
import { originalFlow } from './json/sampleFlowData.js';
import { newFlowData } from './json/newFlowData.js';

class App extends Component {
  componentDidMount(){
    this.obj = Object.assign({},originalFlow.eformFlow);
    console.log("before progressSteps ",originalFlow.eformFlow.progressSteps);
    let progressSteps = originalFlow.eformFlow.progressSteps;
    let indexOfOrder1 = progressSteps.map( (object , index) =>{
      return object.order === 1
    }).indexOf(true);
    console.log("indexOfOrder1 ",indexOfOrder1);
    console.log("1 para ",this.obj.progressSteps[indexOfOrder1]);
    console.log("2 para ",this.obj.progressSteps[0]);
    this.getFlowData(this.obj.progressSteps[indexOfOrder1], this.obj.progressSteps[0]);
    console.log("final ",this.obj.progressSteps);
  }

  getFlowData( order1Data, currentFirstIndexData ){
    let order1DataInitializeAction = [],currentFirstIndexDataIntializeAction = [];
     if( order1Data.progressSubSteps && order1Data.progressSubSteps.length){
        order1Data.startPage = null;
        order1Data.nextCaption = null;
        order1Data.progressSubSteps.map( (object , index) => {
          if( object.order === 1){
            order1DataInitializeAction = object.initialisationActions;
            //object.initialisationActions = currentFirstIndexDataIntializeAction;
          }
          object.startPage = null;
          object.nextCaption = 'next.button.label';
          });
    }else{
      order1Data.startPage = null;
      order1Data.nextCaption = 'next.button.label';
      order1DataInitializeAction = order1Data.initialisationActions;
      //order1Data.initialisationActions = currentFirstIndexDataIntializeAction;
    }
    if( currentFirstIndexData.progressSubSteps &&  currentFirstIndexData.progressSubSteps.length){
      currentFirstIndexData.startPage = null;
      currentFirstIndexData.nextCaption = null;
        let indexOfOrder1 = currentFirstIndexData.progressSubSteps.map( (object , index) =>{
          if( object.order === 1){
            currentFirstIndexDataIntializeAction = object.initialisationActions;
          }
          return object.order === 1
          }).indexOf(true);
          console.log("indexOfOrder1 ",indexOfOrder1);
          if(indexOfOrder1 !== 0){
            this.getFlowData(currentFirstIndexData.progressSubSteps[indexOfOrder1], currentFirstIndexData.progressSubSteps[0]);
          }else{
            currentFirstIndexData.startPage = 'FLOW_XHTML';
            currentFirstIndexData.nextCaption = null;
            currentFirstIndexDataIntializeAction = currentFirstIndexData.initialisationActions;
            currentFirstIndexData.initialisationActions = order1DataInitializeAction;
          }
    }else{
      currentFirstIndexData.startPage = 'FLOW_XHTML';
      currentFirstIndexData.nextCaption = null;
      currentFirstIndexDataIntializeAction = currentFirstIndexData.initialisationActions;
      currentFirstIndexData.initialisationActions = order1DataInitializeAction;
    }

     if( order1Data.progressSubSteps && order1Data.progressSubSteps.length){
        order1Data.progressSubSteps.map( (object , index) => {
          if( object.order === 1){
            object.initialisationActions = currentFirstIndexDataIntializeAction;
          }
          });
    }else{
      order1Data.initialisationActions = currentFirstIndexDataIntializeAction;
    }

    // let indexOfOrder1 = progressSteps.map( (object , index) =>{
    //   return object.order === 1
    // }).indexOf(true);
    // console.log("indexOfOrder1 ",indexOfOrder1);
    // if( indexOfOrder1 === 0 ){
    //     console.log("inside if ",progressSteps[indexOfOrder1].progressSubSteps);
    //     if( progressSteps[indexOfOrder1].progressSubSteps && progressSteps[indexOfOrder1].progressSubSteps.length){
    //         console.log("iterating substep now");
    //         console.log("inside if if ",progressSteps[indexOfOrder1].progressSubSteps)
    //         this.getFlowData(progressSteps[indexOfOrder1].progressSubSteps)

    //     }
    //  }
    //else{
    //     console.log("inside else  ",progressSteps[indexOfOrder1]);
    //     if( progressSteps[indexOfOrder1].progressSubSteps && progressSteps[indexOfOrder1].progressSubSteps.length ){
    //       console.log("inside else if ",progressSteps[indexOfOrder1]);
    //       progressSteps[indexOfOrder1].startPage = null;
    //       progressSteps[indexOfOrder1].nextCaption = null;
    //       progressSteps[0].startPage = null;
    //       progressSteps[0].nextCaption = null;
    //       console.log("iterating substep now");
    //       this.getFlowData(progressSteps[indexOfOrder1].progressSubSteps)
    //     }else{
    //       console.log("inside else else ",progressSteps[indexOfOrder1]);
    //       progressSteps[indexOfOrder1].startPage = null;
    //       progressSteps[indexOfOrder1].nextCaption = 'next.button.label';
    //       progressSteps[0].startPage = 'FLOW_XHTML';
    //       progressSteps[0].nextCaption = null;
    //     }
        
    // }
  }
  render() {
    //let data = beautify(this.state.value, { indent_size: 2 });
    return (
      <div className="container-fluid">
        <div className="row">
          <nav className="mobile-nav-bar-section navbar navbar-default navbar-fixed-top">
            <MobNavigation/>
          </nav>
          <div className="col-sm-4 col-md-3 col-lg-3 navigation-section">
            <NavigationSection/>
          </div>
          <div className="col-sm-6 col-md-7 col-lg-7 content-section mobile-content">
            <ContentSection/>
          </div>
          <div className="col-sm-2 col-md-2 col-lg-2 right-info-section">
            <RightInfoSection/>
          </div>
        </div>
        {/*<HighLight
            lang={this.state.lang}
            value={data}
          />*/}
      </div>
    );
  }
}

export default App;
